generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model asset {
  id                            Bytes                      @id
  alt_id                        Bytes?
  specification_version         specification_versions?
  specification_asset_class     specification_asset_class?
  owner                         Bytes?
  owner_type                    owner_type                 @default(single)
  delegate                      Bytes?
  frozen                        Boolean                    @default(false)
  supply                        BigInt                     @default(1)
  supply_mint                   Bytes?
  compressed                    Boolean                    @default(false)
  compressible                  Boolean                    @default(false)
  seq                           BigInt?
  tree_id                       Bytes?
  leaf                          Bytes?
  nonce                         BigInt?
  royalty_target_type           royalty_target_type        @default(creators)
  royalty_target                Bytes?
  royalty_amount                Int                        @default(0)
  asset_data                    Bytes?
  created_at                    DateTime?                  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  burnt                         Boolean                    @default(false)
  slot_updated                  BigInt?
  data_hash                     String?                    @db.Char(50)
  creator_hash                  String?                    @db.Char(50)
  owner_delegate_seq            BigInt?
  leaf_seq                      BigInt?
  base_info_seq                 BigInt?
  slot_updated_metadata_account BigInt?
  slot_updated_token_account    BigInt?
  slot_updated_mint_account     BigInt?
  slot_updated_cnft_transaction BigInt?

  @@index([delegate], map: "asset_delegate")
  @@index([leaf], map: "asset_leaf")
  @@index([owner], map: "asset_owner")
  @@index([tree_id], map: "asset_tree")
}

model asset_authority {
  id           BigInt   @id @default(autoincrement())
  asset_id     Bytes    @unique(map: "asset_authority_asset_id")
  scopes       String[]
  authority    Bytes
  seq          BigInt
  slot_updated BigInt

  @@index([asset_id, authority], map: "asset_authority_idx")
  @@index([authority], map: "idx_asset_authority_authority")
}

model asset_creators {
  id           BigInt  @id @default(autoincrement())
  asset_id     Bytes
  creator      Bytes
  share        Int     @default(0)
  verified     Boolean @default(false)
  seq          BigInt?
  slot_updated BigInt?
  position     Int     @default(-1) @db.SmallInt

  @@unique([asset_id, position], map: "asset_creator_pos_unique")
  @@index([asset_id, creator, verified], map: "asset_creator_verified")
  @@index([asset_id], map: "idx_asset_creators_asset_id")
  @@index([creator], map: "idx_asset_creators_creator")
}

model asset_data {
  id                    Bytes            @id
  chain_data_mutability chain_mutability @default(mutable)
  chain_data            Json
  metadata_url          String           @db.VarChar(200)
  metadata_mutability   mutability       @default(mutable)
  metadata              Json
  slot_updated          BigInt
  reindex               Boolean?         @default(false)
  raw_name              Bytes?
  raw_symbol            Bytes?
  base_info_seq         BigInt?
}

model asset_grouping {
  id             BigInt  @id @default(autoincrement())
  asset_id       Bytes
  group_key      String
  group_value    String?
  seq            BigInt?
  slot_updated   BigInt?
  verified       Boolean @default(false)
  group_info_seq BigInt?

  @@unique([asset_id, group_key], map: "asset_grouping_key_unique")
  @@index([group_key, group_value], map: "asset_grouping_key")
}

model asset_v1_account_attachments {
  id              Bytes                  @id
  asset_id        Bytes?
  attachment_type v1_account_attachments
  initialized     Boolean                @default(false)
  data            Json?
  slot_updated    BigInt
}

model backfill_items {
  id         BigInt  @id @default(autoincrement())
  tree       Bytes
  seq        BigInt
  slot       BigInt
  force_chk  Boolean
  backfilled Boolean
  failed     Boolean @default(false)
  locked     Boolean @default(false)

  @@index([seq])
  @@index([tree, backfilled])
  @@index([tree, failed])
  @@index([tree, force_chk])
  @@index([tree])
  @@index([tree, locked])
  @@index([tree, seq])
  @@index([tree, slot])
}

model cl_audits_v2 {
  id          BigInt      @id @default(autoincrement())
  tree        Bytes
  leaf_idx    BigInt
  seq         BigInt
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  tx          Bytes
  instruction instruction

  @@unique([tree, leaf_idx, seq], map: "unique_tree_leafidx_seq")
  @@index([tree, seq], map: "tree_seq_idx")
}

model cl_items {
  id       BigInt  @id @default(autoincrement())
  tree     Bytes
  node_idx BigInt
  leaf_idx BigInt?
  seq      BigInt
  level    BigInt
  hash     Bytes

  @@unique([tree, node_idx], map: "cl_items__tree_node")
  @@index([hash])
  @@index([leaf_idx], map: "cl_items_leaf_idx")
  @@index([level], map: "cl_items_level")
  @@index([node_idx], map: "cl_items_node_idx")
}

model raw_txn {
  signature String  @id @db.VarChar(64)
  slot      BigInt
  processed Boolean

  @@index([slot], map: "raw_slot")
}

model seaql_migrations {
  version    String @id @db.VarChar
  applied_at BigInt
}

model tasks {
  id           String      @id @db.VarChar
  task_type    String      @db.VarChar
  data         Json
  status       task_status
  created_at   DateTime    @db.Timestamp(6)
  locked_until DateTime?   @db.Timestamp(6)
  locked_by    String?     @db.VarChar
  max_attempts Int         @default(1) @db.SmallInt
  attempts     Int         @default(0) @db.SmallInt
  duration     Int?
  errors       String?

  @@index([attempts], map: "task_attempts", type: Brin)
  @@index([status], map: "task_status")
  @@index([created_at], map: "tasks_created_at", type: Brin)
  @@index([locked_until], map: "tasks_locked_until", type: Brin)
}

model token_accounts {
  pubkey           Bytes   @id
  mint             Bytes
  amount           BigInt  @default(0)
  owner            Bytes
  frozen           Boolean @default(false)
  close_authority  Bytes?
  delegate         Bytes?
  delegated_amount BigInt  @default(0)
  slot_updated     BigInt
  token_program    Bytes

  @@index([mint], map: "ta_mint")
}

model tokens {
  mint             Bytes  @id
  supply           BigInt @default(0)
  decimals         Int    @default(0)
  token_program    Bytes
  mint_authority   Bytes?
  freeze_authority Bytes?
  close_authority  Bytes?
  extension_data   Bytes?
  slot_updated     BigInt

  @@index([close_authority], map: "t_close_auth")
  @@index([freeze_authority], map: "t_freeze_auth")
  @@index([mint_authority], map: "t_mint_auth")
}

enum chain_mutability {
  unknown
  mutable
  immutable
}

enum instruction {
  unknown
  mint_v1
  redeem
  cancel_redeem
  transfer
  delegate
  decompress_v1
  compress
  burn
  verify_creator
  unverify_creator
  verify_collection
  unverify_collection
  set_and_verify_collection
  mint_to_collection_v1
  update_metadata
}

enum mutability {
  unknown
  mutable
  immutable
}

enum owner_type {
  unknown
  token
  single
}

enum royalty_target_type {
  unknown
  creators
  fanout
  single
}

enum specification_asset_class {
  unknown
  FUNGIBLE_TOKEN
  FUNGIBLE_ASSET
  NFT
  PRINTABLE_NFT
  PRINT
  TRANSFER_RESTRICTED_NFT
  NON_TRANSFERABLE_NFT
  IDENTITY_NFT
  PROGRAMMABLE_NFT
}

enum specification_versions {
  unknown
  v0
  v1
  v2
}

enum task_status {
  pending
  running
  success
  failed
}

enum v1_account_attachments {
  unknown
  edition
  master_edition_v2
  master_edition_v1
  edition_marker
}
